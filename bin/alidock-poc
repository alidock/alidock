#!/bin/bash -e

# Configuration
DO_DEBUG=
DOCK_NAME=alidock
IMAGE_NAME=alidock
RUN_DIR=/tmp/alidock
SHARED_DIR=/tmp/alidock_shared
SSH_ENTRYPOINT=

# Print in colors
function log() { printf "\033[1;32m$1\033[m\n"; }
function logerr() { printf "\033[1;31m$1\033[m\n"; }

# Parse options
CMD="$1"
case "$CMD" in
  enter|'')
    DO_CREATE=1
    DO_ENTER=1
  ;;
  enter-tmux)
    SSH_ENTRYPOINT='-t tmux -u -CC new-session -A -s alidock-tmux-session'
    DO_CREATE=1
    DO_ENTER=1
  ;;
  status)
    DO_STATUS=1
  ;;
  start|create)
    DO_CREATE=1
  ;;
  stop|destroy|rm|kill)
    DO_DESTROY=1
  ;;
  update)
    DO_UPDATE=1
  ;;
  *)
    logerr "Unknown command: $CMD"
    exit 1
  ;;
esac

[[ $DO_DEBUG ]] && set -x || DONT_DEBUG=1

# Check if Docker is working
ERR=0
docker ps &> /dev/null || ERR=$?
if [[ $ERR != 0 ]]; then
  logerr "Docker is not working: is it installed and running?"
  exit 1
fi

if [[ $DO_DESTROY ]]; then
  log "Destroying container (your data will be preserved)"
  docker rm -f $DOCK_NAME &> /dev/null
fi

if [[ $DO_UPDATE ]]; then
  log "Updating container to the latest version"
  docker pull $DOCK_NAME
fi

# Check if a container named alidock exists
ERR=0
docker exec $DOCK_NAME /bin/true &> /dev/null || ERR=$?

if [[ $DO_UPDATE && $ERR == 0 ]]; then
  logerr "You have a container running. If you want to run with the new one:"
  logerr "  $0 stop"
  logerr "  $0"
fi

if [[ $DO_STATUS ]]; then
  if [[ $ERR == 0 ]]; then
    log "Container is running"
    exit 0
  else
    logerr "Container is not running"
    exit 1
  fi
fi

if [[ $DO_CREATE && $ERR != 0 ]]; then
  log "Creating container, hold on"

  # Detect current user and group
  CUR_UID=$(id -u)
  CUR_GID=$(id -g)
  CUR_UNAME=$(whoami)
  CUR_GNAME=$( RE='gid=[0-9]+\(([^)]+)\)'; [[ $(id) =~ $RE ]] && echo ${BASH_REMATCH[1]} || echo )
  if [[ ! $CUR_UID || ! $CUR_GID || ! $CUR_UNAME || ! $CUR_GNAME ]]; then
    logerr "Cannot detect user/group properly. uid=$CUR_UID gid=$CUR_GID user=$CUR_UNAME group=$CUR_GNAME"
    exit 1
  fi

  rm -rf "$RUN_DIR"
  mkdir -p "$RUN_DIR"
  [[ -d $SHARED_DIR ]] && chmod 0755 "$SHARED_DIR" || mkdir -p "$SHARED_DIR"
  mkdir -p "$SHARED_DIR"
  chmod 0755 "$SHARED_DIR"  # fix after too

  # No .bashrc/.bash_profile?
  if [[ ! -e $SHARED_DIR/.bashrc ]]; then
    cat > $SHARED_DIR/.bashrc << \EOF
# Automatically generated by alidock
export PROMPT_COMMAND=set_custom_ps1
function set_custom_ps1() {
  local RV=$?
  PS1='[alidock] \w \$> '
  [[ $RV == 0 ]] || PS1="$RV|$PS1"
  export PS1
}
EOF
  fi
  if [[ ! -e $SHARED_DIR/.bash_profile ]]; then
    cat > $SHARED_DIR/.bash_profile << \EOF
# Automatically generated by alidock
[[ -e $HOME/.bashrc ]] && source $HOME/.bashrc
EOF
  fi

  docker rm -f $DOCK_NAME &> /dev/null || true
  docker run --rm -d -p 50022:22 --name $DOCK_NAME -v "$SHARED_DIR:/shared:rw" $IMAGE_NAME /usr/sbin/sshd -D > $RUN_DIR/container_id  # -ddd
  ssh-keygen -t rsa -f $RUN_DIR/id_rsa -N '' &> /dev/null
  docker exec $DOCK_NAME bash -c "${DO_DEBUG:+set -x;} useradd -d /shared -M -N -s /bin/bash -u $CUR_UID $CUR_UNAME"
  docker exec $DOCK_NAME su "$CUR_UNAME" -c "${DO_DEBUG:+set -x;} mkdir -p /shared/.ssh && ${DO_DEBUG:+rm -f /shared/.hushlogin &&} ${DONT_DEBUG:+touch /shared/.hushlogin &&} echo $(cat $RUN_DIR/id_rsa.pub) > /shared/.ssh/authorized_keys && chmod -R u=rwX,g=rX,o=rX /shared/.ssh"
fi

if [[ $DO_ENTER ]]; then
  log "Starting a shell into the container"
  exec ssh localhost -p 50022 -Y -F /dev/null -oForwardX11Trusted=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -l $(whoami) ${DONT_DEBUG:+-oLogLevel=QUIET} -i $RUN_DIR/id_rsa $SSH_ENTRYPOINT
fi
